// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/comment/comment.proto

package social_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Comment_GetCommentsByPostId_FullMethodName = "/comment.Comment/GetCommentsByPostId"
	Comment_AddComment_FullMethodName          = "/comment.Comment/AddComment"
	Comment_ChangeCommentRating_FullMethodName = "/comment.Comment/ChangeCommentRating"
	Comment_PinComment_FullMethodName          = "/comment.Comment/PinComment"
	Comment_DeleteComment_FullMethodName       = "/comment.Comment/DeleteComment"
)

// CommentClient is the client API for Comment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentClient interface {
	GetCommentsByPostId(ctx context.Context, in *GetCommentsByPostIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetCommentsByPostIdResponse], error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	ChangeCommentRating(ctx context.Context, in *ChangeCommentRatingRequest, opts ...grpc.CallOption) (*ChangeCommentRatingResponse, error)
	PinComment(ctx context.Context, in *PinCommentRequest, opts ...grpc.CallOption) (*PinCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
}

type commentClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentClient(cc grpc.ClientConnInterface) CommentClient {
	return &commentClient{cc}
}

func (c *commentClient) GetCommentsByPostId(ctx context.Context, in *GetCommentsByPostIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetCommentsByPostIdResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Comment_ServiceDesc.Streams[0], Comment_GetCommentsByPostId_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCommentsByPostIdRequest, GetCommentsByPostIdResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Comment_GetCommentsByPostIdClient = grpc.ServerStreamingClient[GetCommentsByPostIdResponse]

func (c *commentClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, Comment_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) ChangeCommentRating(ctx context.Context, in *ChangeCommentRatingRequest, opts ...grpc.CallOption) (*ChangeCommentRatingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeCommentRatingResponse)
	err := c.cc.Invoke(ctx, Comment_ChangeCommentRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) PinComment(ctx context.Context, in *PinCommentRequest, opts ...grpc.CallOption) (*PinCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinCommentResponse)
	err := c.cc.Invoke(ctx, Comment_PinComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, Comment_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServer is the server API for Comment service.
// All implementations must embed UnimplementedCommentServer
// for forward compatibility.
type CommentServer interface {
	GetCommentsByPostId(*GetCommentsByPostIdRequest, grpc.ServerStreamingServer[GetCommentsByPostIdResponse]) error
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	ChangeCommentRating(context.Context, *ChangeCommentRatingRequest) (*ChangeCommentRatingResponse, error)
	PinComment(context.Context, *PinCommentRequest) (*PinCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	mustEmbedUnimplementedCommentServer()
}

// UnimplementedCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentServer struct{}

func (UnimplementedCommentServer) GetCommentsByPostId(*GetCommentsByPostIdRequest, grpc.ServerStreamingServer[GetCommentsByPostIdResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetCommentsByPostId not implemented")
}
func (UnimplementedCommentServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentServer) ChangeCommentRating(context.Context, *ChangeCommentRatingRequest) (*ChangeCommentRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCommentRating not implemented")
}
func (UnimplementedCommentServer) PinComment(context.Context, *PinCommentRequest) (*PinCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinComment not implemented")
}
func (UnimplementedCommentServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServer) mustEmbedUnimplementedCommentServer() {}
func (UnimplementedCommentServer) testEmbeddedByValue()                 {}

// UnsafeCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServer will
// result in compilation errors.
type UnsafeCommentServer interface {
	mustEmbedUnimplementedCommentServer()
}

func RegisterCommentServer(s grpc.ServiceRegistrar, srv CommentServer) {
	// If the following call pancis, it indicates UnimplementedCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Comment_ServiceDesc, srv)
}

func _Comment_GetCommentsByPostId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommentsByPostIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServer).GetCommentsByPostId(m, &grpc.GenericServerStream[GetCommentsByPostIdRequest, GetCommentsByPostIdResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Comment_GetCommentsByPostIdServer = grpc.ServerStreamingServer[GetCommentsByPostIdResponse]

func _Comment_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_ChangeCommentRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCommentRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).ChangeCommentRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_ChangeCommentRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).ChangeCommentRating(ctx, req.(*ChangeCommentRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_PinComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).PinComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_PinComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).PinComment(ctx, req.(*PinCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comment_ServiceDesc is the grpc.ServiceDesc for Comment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.Comment",
	HandlerType: (*CommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _Comment_AddComment_Handler,
		},
		{
			MethodName: "ChangeCommentRating",
			Handler:    _Comment_ChangeCommentRating_Handler,
		},
		{
			MethodName: "PinComment",
			Handler:    _Comment_PinComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Comment_DeleteComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCommentsByPostId",
			Handler:       _Comment_GetCommentsByPostId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/comment/comment.proto",
}
